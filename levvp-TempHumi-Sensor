metadata {
    definition (
    name: "levvp Temp/Humi Sensor",
    namespace: "levvp",
    author: "levvp",
    importUrl: "https://raw.githubusercontent.com/levvp/hubi-driver-temp_humi_sensor/master/levvp-TempHumi-Sensor" )
    {
        capability "Sensor"
    	capability "Refresh"
    	capability "Temperature Measurement"
    	capability "RelativeHumidity Measurement"
        attribute "temperature", "float"
        attribute "relativehumidity", "float"
    }
	preferences {
		section{
			input( type: "string", name: "NodeURL", title: "Node URL", required: true, defaultValue: "192.168.7.2" )
			input( type: "enum", name: "RefreshRate", title: "Data Refresh Rate (in minutes)", required: true, multiple: false, options: [ [ "1" : "1" ], [ "5" : "5" ] ], defaultValue: "1" )
			input( type: "string", name: "SensorNo", title: "Sensor Number", required: true, defaultValue: "0" )
		}
	}
}

def installed()
{
    updated()
}

def updated(){
    asynchttpGet( "GetList", [ uri: "${NodeURL}/sensors", contentType: "text/plain" ] )
    unschedule()
	if( RefreshRate == "1" ){
		runEvery1Minute( refresh )
	}
	if( RefreshRate == "5" ){
		runEvery5Minutes( refresh )
	}
    refresh()
}

def refresh() {
    asynchttpGet( "GetTempData", [ uri: "${NodeURL}/sensor/temp/${SensorNo}" ] )
    asynchttpGet( "GetHumiData", [ uri: "${NodeURL}/sensor/humi/${SensorNo}" ] )
}

def GetList( resp, data ) {
	if (resp == null || resp.class != hubitat.scheduling.AsyncResponse) {
		return
	}
	if( resp.getStatus() == 200 ) {
        	state.Sensors = resp.data
	} else {
        	log.error "${device.displayName} Error connecting: ${resp.status}"
	}
}

def GetTempData( resp, data ) {
	if (resp == null || resp.class != hubitat.scheduling.AsyncResponse) {
		return
	}
	if( resp.getStatus() == 200 ) {
        	state.ResponseTemp = resp.data
		if( resp.data.isNumber() ) {
        		sendEvent( name: "temperature", value: resp.data.toFloat(), unit: location.getTemperatureScale() )
		}
	} else {
        	log.error "${device.displayName} Error connecting: ${resp.status}"
	}
}

def GetHumiData( resp, data ) {
	if (resp == null || resp.class != hubitat.scheduling.AsyncResponse) {
		return
	}
	if( resp.getStatus() == 200 ) {
		state.ResponseHumi = resp.data
		if( resp.data.isNumber() ) {
			sendEvent( name: "relativehumidity", value: resp.data.toFloat(), unit: "%" )
		}	
	} else {
		log.error "${device.displayName} Error connecting: ${resp.status}"
	}
}
